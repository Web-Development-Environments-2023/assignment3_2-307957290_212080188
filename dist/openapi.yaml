openapi: 3.0.0
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1
servers:
# local:
- url: "http://127.0.0.1:3000"
# remote:
# - url: "http://132.72.65.211"
  description: SwaggerHub API Auto Mocking hey
tags:
- name: Auth
  description: All authentication related routes
- name: Users
  description: All the user's personal app info
- name: Recipes
  description: All reciepes general info
paths:
  /register:
    post:
      tags:
      - Auth
      summary: A new user from the client is added to the server
      description: A JSON object contains all the details about the new user.
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
  /login:
    post:
      tags:
      - Auth
      summary: Login an exist user
      description: An exist user login to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginScheme'
        required: true
      responses:
        "200":
          description: |
            User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: Authentication failed
  /logout:
    post:
      tags:
        - Auth
      summary: logout a user from the system and delete his cookie
      responses:
        "200":
          description: "the user has ben successfully logged out"
  /users/favorites:
    get:
      tags:
      - Users
      summary: Return the favorite recipes that were saved by user
      description: Get an array of recipes that were saved by a specific user
      responses:
        "200":
          description: data about the user's favorites recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the favorites list of a user
      description: save recipe in the favorites list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: reciepe's id which the user saved
                  example: 716429
      responses:
        "200":
          description: The Recipe successfully saved as favorite
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/addMyRecipe:
    get:
      tags:
        - Users
      summary: Return the recipes added by the user
      description: Get an array of recipes that were added by a specific user
      responses:
        "200":
          description: Data about the user's added recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: User is not authorized
      security:
        - cookieAuth: []
    post:
      tags:
      - Users
      summary: Add a user's own recipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipePreview'
      responses:
        '201':
          description: The Recipe successfully saved
        '400':
          description: Bad Request
        '401':
          description: Unauthorized User
        '500':
          description: Internal Server Error
      security:
      - cookieAuth: []
  /users/family:
    get:
      tags:
        - Users
      summary: Return the family recipes that were saved by a user
      description: Get an array of family recipes that were saved by a specific user
      responses:
        "200":
          description: Data about the user's family recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: User is not authorized
      security:
        - cookieAuth: []
    post:
      tags:
        - Users
      summary: Save a recipe in the family recipes list of a user
      description: Save a recipe in the family recipes list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: Recipe's ID which the user saved
                  example: 716429
      responses:
        "200":
          description: The recipe has been successfully saved as a family recipe
        "401":
          description: User is not authorized
      security:
        - cookieAuth: []
  /users/recipe:
    get:
      tags:
      - Users
      summary: Return the last 3 recipes viewed by a user
      description: Get an array of the last 3 recipes viewed by a specific user.
      responses:
        "200":
          description: Data about the user's last 3 viewed recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: User is not authorized
      security:
        - cookieAuth: []   
  /users/recipe/{recipeId}:
    get:
      tags:
      - Users
      summary: Return preview details on recipe by his ID
      description: Return preview details on recipe by his ID
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreview'
        "404":
          description: recipeId is not exists
      security:
        - cookieAuth: []



# My API Code
  /recipes:
    get:
      tags:
      - Recipes
      summary: Get all recipes
      # parameters:
      #   # - name: user_id
      #   #   in: query
      #   #   description: ID of the user whose recipes to retrieve
      #     required: true
      #     schema:
      #       type: integer
      responses:
        '200':
          description: OK
    post:
      tags:
      - Recipes
      summary: Add a recipe
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipePreview'
      responses:
        '201':
          description: Created
# My API Code
  # /recipes/search:
  #   get:
  #     tags:
  #       - Recipes
  #     summary: Search for recipes
  #     parameters:
  #       - name: query
  #         in: query
  #         description: The search query (recipe name)
  #         required: true
  #         schema:
  #           type: string
  #       - name: filter
  #         in: query
  #         description: Select a filter to apply to the search results
  #         required: false
  #         schema:
  #           type: string
  #           enum: [cuisine, diet, intolerance]
  #       - name: sort
  #         in: query
  #         description: The field to sort by (e.g., preparation_time, popularity)
  #         required: false
  #         schema:
  #           type: string
  #           enum: [preparation_time, popularity]
  #       - name: limit
  #         in: query
  #         description: The number of recipes to retrieve (e.g., 5, 10, 15)
  #         required: false
  #         schema:
  #           type: integer
  #           default: 5
  #           enum: [5, 10, 15]
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 results:
  #                   type: array
  #                   items:
  #                     $ref: '#/components/schemas/RecipePreview'
  #       '404':
  #         description: Not Found

  /recipes/{recipeId}:
    get:
      tags:
      - Recipes
      summary: Return preview details on recipe by his ID
      description: Return preview details on recipe by his ID
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreview'
        "404":
          description: recipeId is not exists
    put:
      tags:
      - Recipes
      summary: Update a recipe by ID
      parameters:
        - in: path
          name: recipeId
          required: true
          description: ID of the recipe to update
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipePreview'
      responses:
        '200':
          description: OK
        '404':
          description: Recipe not found
      # security:
      #   - bearerAuth: []
    delete:
      tags:
      - Recipes
      summary: Delete a recipe by ID
      parameters:
        - in: path
          name: recipeId
          required: true
          description: ID of the recipe to delete
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: Recipe Deleted 
        '404':
          description: Recipe not found
          
  /search:
    get:
      tags:
      - Search
      summary: Search for recipes
      parameters:
        - name: query
          in: query
          description: The search query (recipe name)
          required: true
          schema:
            type: string
        - name: filter
          in: query
          description: Select a filter to apply to the search results
          required: false
          schema:
            type: string
            enum: [cuisine, diet, intolerance]
        - name: sort
          in: query
          description: The field to sort by (e.g., preparation_time, popularity)
          required: false
          schema:
            type: string
            enum: [preparation_time, popularity]
        - name: limit
          in: query
          description: The number of recipes to retrieve (e.g., 5, 10, 15)
          required: false
          schema:
            type: integer
            default: 5
            enum: [5, 10, 15]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/RecipePreview'
        '404':
          description: Not Found

components:
  schemas:
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins between 3 to 8 letters only
          example: my_name
        firstname:
          type: string
          description: user's first name
          example: my_first_name
        lastname:
          type: string
          description: user's last name
          example: my_last_name
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password conatins between 5 to 10 chars, at least one of them
            is a number and a special char
          format: password
          example: my_name@12
        email:
          pattern: email
          type: string
          description: user's email
          example: my_name12@gmail.com
        # image-url:
        #   pattern: URL
        #   type: string
        #   description: URL for the user's image
        #   example: https://cloudinary.com/
      description: Model containing user info
    LoginScheme:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins letters only
        password:
          maxLength: 10
          minLength: 5
          description: password conatins at least one number and one special char
          format: password
      example:
        username: My_name
        password: My_name@12
    RecipePreview:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
        ingredients:
          $ref: '#/components/schemas/Ingredients'
        directions:
          $ref: '#/components/schemas/Directions'
    Ingredients:
      type: array
      description: List of ingredients needed for the recipe
      items:
        type: object
        properties:
          name:
            type: string
            description: The name of the ingredient
            example: Heavy Cream
          amount:
            type: number
            description: The amount of the ingredient
            example: 250
          unit:
            type: string
            description: The unit of measurement for the ingredient amount
            example: ml
    Directions:
      type: array
      description: List of directions for preparing the recipe
      items:
        type: string
        example:
          - Boil water in a large pot.
          - Add the macaroni and cook until tender.
          - In a separate saucepan, heat the heavy cream until hot.
          - Gradually add the cheddar cheese to the hot cream, stirring until melted and smooth.
          - Drain the cooked macaroni and mix it with the cheese sauce.
          - Serve hot and enjoy!

      
  
